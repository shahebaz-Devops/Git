# mkdir github-for-devops-workshop  
# git init                (Create a new Git repository)
# git status              (Check the status of the repository)

Git has three stages of workflow -1. Working aria 2. Staging aria 3. Local Repository.
We send data or code from working aria to staging aria by add command and staging aria to Local repository by 
commit command and finally send data/code from Local repo to central repo by push command.

untracked :- if file is in file system so it is utracked for vcs like git 
staged :- when file is added to staged when code is completed
tracked :- when file is moved from staging to tracked then its tracked for git

# git add <filename>  (Add a file to the staging area:)
# git rm --cached <file>   (to unstaged)
# git add .          (to stage all files at once)
# git commit -m "added testing file" (Commit changes with a message)

now delete the testing.py file and you can also recover it in git

# rm testing.py
# git restore testing.py

If want to send this code to my central repository, I have to connect local repo to central repo first, for this action I 
have to create a new repository (any name) and paste the URL of git repo and execute command as given below 
[Mumbaigit] # git remote add origin https://github.com/zshan227/centralgit2.git

# git remote add origin https://github.com/shahebaz-Devops/git-repository-for-practice.git
# git remote -v (to check we connect or not to github URL)

# git remote set-url origin https://PAT@github.com/shahebaz-Devops/git-repository-for-practice.git   (to set the url)
# git push origin master

(PAT)

# git clone https://github.com/shahebaz-Devops/git-repository-for-practice.git      (to clone repo from central to local repo)
# git pull origin master    (to pull the changes from github to local)

Branching in Git:-

# git branch         (to check the branches available)
# git branch dev      (to create a branch)
# git switch dev / # git checkout dev
# vi dev.txt
# git status

new token


# git add dev.txt
# git commit -m "dev file"
# git log
# git log --oneline
# git push origin dev
HEAD is a latest commit

Pull request is a way to merge one branch with another on github

# git fetch    (to fetch remote branches to our local)
# git pull    (to add remote changes to update on our branch at local)
----------------------------------------------------------------------------

> Git Hook

Using git hooks we can apply check before or afetr commiting the code,
for example if we define that if there is any syntax issue with the code so it should not be commited.

git hooks = pre-commit hook

----------------------------------------------------------------------------

Porject :- Deploy a static website using GithubAction

once we run the code using github action so code will goto s3 bucket and website will be publicly accesible.

First an IAM user and attached it admin level policy  or you can even perform this using root user for practice purpose only
create access key and secret key for the user
on git hub, fork the shubham londhe repo where the code is available
once the repo is forked goto main.yml file and now goto github setting > secret and variable > action > create new repo > 
repo name "AWS_ACCESS_KEY_ID" and value is "our aws access id" then create > create new repo > 
repo name "AWS_SECRET_ACCESS_KEY" value is "our aws secret access key" then create
create one s3 public bucket and name it as tws-junoon-shahebaz to make is publick create a policy for s3 getobject action and apply
now goto s3 static website option and enable it keep filename as index.html and error.html
now goto this repo "tws-portfolio" in main.yml file define your bucket name like "tws-junoon-shahebaz"
once done make a little change in index.html and goto to action on github and see workflows either is succesfully done or not.
now access the static s3 bucker url, you can access the web page.

----------------------------------------------------------------------------

git init   (Initializes a new Git repository in the current directory.)
git clone  (to clone the code from central repo to local)
git add    (Stages changes (files or modifications) for the next commit.)
git commit ( Saves staged changes to the repository with a descriptive message.)
git status ( Shows the current state of the working directory and staging area.)
git diff   ( Displays the differences between the working directory and the staging area (unstaged changes).)
git checkout ( Switches branches)
git reset  ( Undoes changes by moving the HEAD and optionally modifying the staging area or working directory)
Here's an example of using git reset:
git reset --soft HEAD~1 > This command removes the last commit but keeps the changes staged, so you can modify or recommit them.
git log  ( Shows the commit history of the repository. )
git show ( Displays detailed information about a specific commit, including changes made.)
git show <commit-hash> > Replace <commit-hash> with an actual commit ID to see its details.
git tag  ( Creates, lists, or manages tags in a Git repository. Tags are used to mark specific points in history, often for releases.)
git tag v1.0.0
git tag -a v1.0.0 -m "Version 1.0 release"
git push ( Uploads local commits to a remote repository.)
git push origin main
git pull ( Fetches changes from a remote repository and merges them into the current branch. )
git pull origin main
git fetch origin  (For only fetching changes (without merging))
git branch ‚Äì Manages branches in a Git repository.
git branch  (List all branches)
git branch feature-branch (Create a new branch )
git branch -d feature-branch  (Delete a branch)
git merge ‚Äì Combines changes from one branch into another.
git merge feature-branch   (Merges feature-branch into the current branch.)
git rebase ‚Äì Moves or reapplies commits from one branch onto another, creating a cleaner commit history.
git rebase main ( Applies the current branch‚Äôs commits on top of the latest main branch commits.)
git branch --set-upstream-to ‚Äì Sets or changes the upstream (tracking) branch for the current branch.
git branch --set-upstream-to=origin/main ( Links the current branch to origin/main, so git pull and git push automatically interact with it.)
git push --set-upstream origin my-branch
git branch --unset-upstream ‚Äì Removes the upstream (tracking) branch from a local branch.
git branch --unset-upstream  This removes the tracking information for the current branch, meaning git pull and git push will no longer automatically sync with a remote branch.
git cherry-pick ‚Äì Apply Specific Commits to Another Branch
The git cherry-pick command allows you to selectively apply specific commits from one branch to another without merging everything. This is useful when you want to pick only certain changes instead of merging an entire branch.
git cherry-pick a1b2c3d  (This applies commit a1b2c3d from another branch to the current branch.)
git stash ‚Äì Temporarily Save Changes Without Committing 
The git stash command allows you to save uncommitted changes without committing them, so you can work on something else and come back later. This is useful when you need to switch branches or pull updates but don't want to commit yet.
git stash  (Stash Your Changes)
git stash list
git stash apply  (Apply Stashed Changes Without Removing)
git stash apply stash@{1}
git stash pop  (Apply Stashed Changes and Remove from Stash)
git stash drop stash@{1}  (Remove a Specific Stash)
git stash clear  (To remove all stashes:)
git clone --mirror ‚Äì Create a Full Bare Clone of a Repository 
The git clone --mirror command creates a mirror clone of a Git repository. Unlike a regular clone, this mirrors all branches, tags, and refs, making it ideal for backups or repository migrations.
git clone --mirror https://github.com/user/repo.git  (This creates a bare mirrored clone of repo.git, including all refs and remote-tracking branches.)
git config ‚Äì Configure Git Settings ‚öôÔ∏è
The git config command is used to set and manage Git configuration settings like user details, editor preferences, aliases, and more. It can be applied at different levels:
Set User Information
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
For a specific repository:
git config --local user.name "Repo-Specific Name"
git config --local user.email "repo.email@example.com"
git config --list  (Check Current Configurations)
Resetting Git Configuration (git config --unset) 
If you need to reset or remove a specific Git configuration, you can use the git config --unset command.
git config --global --unset user.name
git config --global --unset user.email
git config --local --unset user.name
git blame ‚Äì Find Who Changed Each Line in a File üîç
The git blame command shows who last modified each line of a file and when. This is useful for tracking changes, debugging, or understanding the history of a file.
git blame filename
git revert in Simple Terms üöÄ
üîπ What does it do?
It undoes a commit by making a new commit that reverses the changes.

üîπ Why use it?
If you made a mistake in a commit but don‚Äôt want to lose history, git revert is the safest way to fix it.
Yes! When you run git revert, it creates a new commit that undoes the changes introduced by the specified commit.
Example Scenario üìå
1Ô∏è‚É£ You added a new line to a file and committed it:
echo "New Feature" >> feature.txt
git add feature.txt
git commit -m "Added new feature"
Now, the commit history looks like this:
A -- B -- C (Added new feature) -- D (Latest)
2Ô∏è‚É£ You realize this change was wrong and run:
git revert C
‚úÖ Git creates a new commit (E) that removes the line added in commit C.
A -- B -- C -- D -- E (Revert commit)
Result: The new commit cancels out commit C while keeping the history intact.









